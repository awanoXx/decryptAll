import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import gzip
import io
import json

def decrypt_aes(encrypted_data_base64, key):

    # 确保密钥长度有效
    key_bytes = key.encode('utf-8')
    if len(key_bytes) not in [16, 24, 32]:
        raise ValueError("密钥长度必须为16, 24或32字节。当前长度为: {}".format(len(key_bytes)))

    # Base64 解码
    try:
        encrypted_data = base64.b64decode(encrypted_data_base64)
    except base64.binascii.Error as e:
        raise ValueError("无效的 Base64 编码数据。") from e

    # 初始化 AES 解密器，使用 ECB 模式
    cipher = AES.new(key_bytes, AES.MODE_ECB)

    # 解密数据
    decrypted_padded = cipher.decrypt(encrypted_data)

    decrypted = unpad(decrypted_padded, AES.block_size)

    return decrypted

# Gzip解压缩
def decompress_gzip(data):
    with io.BytesIO(data) as byte_io:
        with gzip.GzipFile(fileobj=byte_io, mode='rb') as gzip_file:
            return gzip_file.read()

if __name__ == '__main__':
    # 这是一个 Base64 编码的加密数据示例
    params = r'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'

    key = 'Kj7pQr4Df8s6tXbW'

    try:
        # 解密数据
        decrypted_bytes = decrypt_aes(params, key)
        # 解压缩数据
        decompressed_data = decompress_gzip(decrypted_bytes)
        # 解析JSON
        result = json.loads(decompressed_data.decode('utf-8'))
        print("解密后的明文:", result)
    except Exception as e:
        print("解密过程中发生错误:", str(e))
